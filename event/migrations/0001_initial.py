# Generated by Django 5.1 on 2025-05-31 16:27

import base.mixin
import base.validators
import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EventModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('title', models.CharField(help_text='Title of the event', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the event', null=True)),
                ('start_date', models.DateField(blank=True, help_text='Start date of the event', null=True)),
                ('end_date', models.DateField(blank=True, help_text='End date of the event', null=True)),
                ('is_all_day', models.BooleanField(default=False, help_text='Is this event all day')),
                ('start_time', models.TimeField(blank=True, help_text='Start time of the event', null=True)),
                ('end_time', models.TimeField(blank=True, help_text='End time of the event', null=True)),
                ('event_image', models.ImageField(blank=True, help_text='Image of the event', null=True, upload_to='events/images')),
                ('event_video', models.CharField(blank=True, help_text='Youtube video URL of the event', max_length=700, null=True)),
                ('event_type', models.CharField(choices=[('online', 'ONLINE'), ('offline', 'OFFLINE')], help_text='Type of the event', max_length=255)),
                ('registration_available', models.BooleanField(default=False, help_text='Is this event registration available')),
                ('registration_last_date', models.DateField(blank=True, help_text='Last date of the registration', null=True)),
                ('registration_link', models.CharField(blank=True, help_text='Registration link of the event', max_length=700, null=True, validators=[base.validators.CustomURLValidator()])),
                ('category', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('real_estate', 'REAL_ESTATE'), ('luxury_asset', 'LUXURY_ASSET'), ('educational_and_training', 'EDUCATIONAL_AND_TRAINING'), ('networking_and_business_growth', 'NETWORKING_AND_BUSINESS_GROWTH'), ('webinars_online', 'WEBINARS_ONLINE'), ('social_and_exclusive', 'SOCIAL_AND_EXCLUSIVE')], max_length=50), default=list, size=None)),
                ('sub_category', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('property_showcase_launch', 'PROPERTY_SHOWCASE_LAUNCH'), ('investor_summit', 'INVESTOR_SUMMIT'), ('developer_meetup', 'DEVELOPER_MEETUP'), ('real_estate_expo_trade_show', 'REAL_ESTATE_EXPO_TRADE_SHOW'), ('government_legal_update', 'GOVERNMENT_LEGAL_UPDATE'), ('luxury_car_exhibition', 'LUXURY_CAR_EXHIBITION'), ('yacht_jet_showcase', 'YACHT_JET_SHOWCASE'), ('luxury_watch_collectible', 'LUXURY_WATCH_COLLECTIBLE'), ('real_estate_sales_training', 'REAL_ESTATE_SALES_TRAINING'), ('investment_financial_workshop', 'INVESTMENT_FINANCIAL_WORKSHOP'), ('luxury_market_insight', 'LUXURY_MARKET_INSIGHT'), ('marketing_digital_growth_training', 'MARKETING_DIGITAL_GROWTH_TRAINING'), ('vip_networking_event', 'VIP_NETWORKING_EVENT'), ('b2b_collaboration_meetup', 'B2B_COLLABORATION_MEETUP'), ('industry_panel_discussion', 'INDUSTRY_PANEL_DISCUSSION'), ('live_real_estate_webinar', 'LIVE_REAL_ESTATE_WEBINAR'), ('luxury_market_insight_webinar', 'LUXURY_MARKET_INSIGHT_WEBINAR'), ('developer_qa_session', 'DEVELOPER_QA_SESSION'), ('training_academy_webinar', 'TRAINING_ACADEMY_WEBINAR'), ('private_invitation_only_event', 'PRIVATE_INVITATION_ONLY_EVENT'), ('exclusive_property_tour', 'EXCLUSIVE_PROPERTY_TOUR'), ('propadya_community_meetup', 'PROPADYA_COMMUNITY_MEETUP')], max_length=50), default=list, size=None)),
                ('meeting_link', models.URLField(blank=True, help_text='Event online meeting link', null=True)),
                ('country', models.CharField(blank=True, help_text='Hosted country of the event', max_length=255, null=True)),
                ('district', models.CharField(blank=True, help_text='Hosted district of the event', max_length=255, null=True)),
                ('city', models.CharField(blank=True, help_text='Hosted city of the event', max_length=255, null=True)),
                ('location', models.TextField(blank=True, help_text='Event location', max_length=255, null=True)),
                ('location_link', models.CharField(blank=True, help_text='Location MAP URL of the event', max_length=700, null=True)),
                ('text_color', models.CharField(blank=True, help_text='Text color code of the event', max_length=10, null=True)),
                ('bg_color', models.CharField(blank=True, help_text='Background color code of the event', max_length=10, null=True)),
                ('status', models.CharField(blank=True, choices=[('approved', 'APPROVED'), ('rejected', 'REJECTED'), ('pending', 'PENDING'), ('needs_revision', 'NEEDS_REVISION')], default='pending', help_text='Status of the event', max_length=100, null=True)),
                ('admin_comment', models.TextField(blank=True, help_text='Admin comment for the event', null=True)),
            ],
            options={
                'db_table': 'event',
            },
            bases=(base.mixin.DeepDeleteMixin, base.mixin.ImageHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EventContactPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(help_text='Name of the person', max_length=100)),
                ('position', models.CharField(blank=True, help_text='Position of the person', max_length=100, null=True)),
                ('email', models.EmailField(help_text='Email address of the person', max_length=254)),
                ('contact_number', models.CharField(help_text='Contact number of the person', max_length=50)),
                ('wa_number', models.CharField(blank=True, help_text='WhatsApp number of the person', max_length=100, null=True)),
                ('company', models.CharField(blank=True, help_text='Company of the person', max_length=50)),
                ('whatsapp_available', models.BooleanField(default=False, help_text='Is this person whatsapp available')),
                ('language', models.CharField(blank=True, max_length=100, null=True)),
                ('photo', models.ImageField(blank=True, help_text='Image of the person', null=True, upload_to='events/contact_person')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_contact_person', to='event.eventmodel')),
            ],
            options={
                'abstract': False,
            },
            bases=(base.mixin.DeepDeleteMixin, base.mixin.ImageHandlerMixin, models.Model),
        ),
    ]
